
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 15 11:04:45 PET 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 15 11:04:45 PET 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\011" +
    "\000\002\004\007\000\002\004\007\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\007\000\002\006" +
    "\014\000\002\006\013\000\002\007\007\000\002\007\007" +
    "\000\002\007\011\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\012\002\uffff\004\010\005\005\006\007\001" +
    "\002\000\012\002\000\004\010\005\005\006\007\001\002" +
    "\000\004\063\111\001\002\000\012\002\ufffd\004\ufffd\005" +
    "\ufffd\006\ufffd\001\002\000\004\063\105\001\002\000\004" +
    "\063\013\001\002\000\004\002\012\001\002\000\004\002" +
    "\001\001\002\000\004\051\014\001\002\000\004\052\015" +
    "\001\002\000\004\053\016\001\002\000\020\011\020\014" +
    "\017\015\031\016\023\051\021\063\024\064\027\001\002" +
    "\000\010\051\021\063\024\064\027\001\002\000\010\051" +
    "\021\063\024\064\027\001\002\000\010\051\021\063\024" +
    "\064\027\001\002\000\022\011\020\014\017\015\031\016" +
    "\023\051\021\054\061\063\024\064\027\001\002\000\004" +
    "\063\053\001\002\000\040\011\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\063\uffe7\064\uffe7\001\002\000" +
    "\022\011\ufff6\014\ufff6\015\ufff6\016\ufff6\051\ufff6\054\ufff6" +
    "\063\ufff6\064\ufff6\001\002\000\022\011\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\051\ufff5\054\ufff5\063\ufff5\064\ufff5\001\002" +
    "\000\040\011\uffe6\014\uffe6\015\uffe6\016\uffe6\040\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\063\uffe6\064\uffe6\001\002\000\034\011\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\040\037\041\036\042\040\043\033" +
    "\044\035\051\ufff4\054\ufff4\063\ufff4\064\ufff4\001\002\000" +
    "\010\051\021\063\024\064\027\001\002\000\016\040\037" +
    "\041\036\042\040\043\033\044\035\053\034\001\002\000" +
    "\010\051\021\063\024\064\027\001\002\000\020\011\020" +
    "\014\017\015\031\016\023\051\021\063\024\064\027\001" +
    "\002\000\010\051\021\063\024\064\027\001\002\000\010" +
    "\051\021\063\024\064\027\001\002\000\010\051\021\063" +
    "\024\064\027\001\002\000\010\051\021\063\024\064\027" +
    "\001\002\000\040\011\uffeb\014\uffeb\015\uffeb\016\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\063\uffeb\064\uffeb\001\002\000\040\011" +
    "\uffed\014\uffed\015\uffed\016\uffed\040\uffed\041\uffed\042\040" +
    "\043\033\044\035\051\uffed\052\uffed\053\uffed\054\uffed\063" +
    "\uffed\064\uffed\001\002\000\040\011\uffec\014\uffec\015\uffec" +
    "\016\uffec\040\uffec\041\uffec\042\040\043\033\044\035\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\063\uffec\064\uffec\001\002" +
    "\000\040\011\uffe9\014\uffe9\015\uffe9\016\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\044\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\063\uffe9\064\uffe9\001\002\000\022\011\020\014" +
    "\017\015\031\016\023\051\021\054\046\063\024\064\027" +
    "\001\002\000\022\011\uffef\014\uffef\015\uffef\016\uffef\051" +
    "\uffef\054\uffef\063\uffef\064\uffef\001\002\000\022\011\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\051\ufff9\054\ufff9\063\ufff9\064" +
    "\ufff9\001\002\000\022\011\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\051\ufff8\054\ufff8\063\ufff8\064\ufff8\001\002\000\034\011" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\040\037\041\036\042\040" +
    "\043\033\044\035\051\ufff7\054\ufff7\063\ufff7\064\ufff7\001" +
    "\002\000\040\011\uffea\014\uffea\015\uffea\016\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\uffea\063\uffea\064\uffea\001\002\000\004\017\054" +
    "\001\002\000\010\051\021\063\024\064\027\001\002\000" +
    "\016\040\037\041\036\042\040\043\033\044\035\053\056" +
    "\001\002\000\020\011\020\014\017\015\031\016\023\051" +
    "\021\063\024\064\027\001\002\000\022\011\020\014\017" +
    "\015\031\016\023\051\021\054\060\063\024\064\027\001" +
    "\002\000\022\011\uffee\014\uffee\015\uffee\016\uffee\051\uffee" +
    "\054\uffee\063\uffee\064\uffee\001\002\000\012\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\001\002\000\016\040\037\041\036" +
    "\042\040\043\033\044\035\052\063\001\002\000\040\011" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\040\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\063" +
    "\uffe8\064\uffe8\001\002\000\016\040\037\041\036\042\040" +
    "\043\033\044\035\053\065\001\002\000\020\011\020\014" +
    "\017\015\031\016\023\051\021\063\024\064\027\001\002" +
    "\000\022\011\020\014\017\015\031\016\023\051\021\054" +
    "\067\063\024\064\027\001\002\000\026\011\ufff3\012\070" +
    "\013\071\014\ufff3\015\ufff3\016\ufff3\051\ufff3\054\ufff3\063" +
    "\ufff3\064\ufff3\001\002\000\010\051\021\063\024\064\027" +
    "\001\002\000\004\053\072\001\002\000\020\011\020\014" +
    "\017\015\031\016\023\051\021\063\024\064\027\001\002" +
    "\000\022\011\020\014\017\015\031\016\023\051\021\054" +
    "\074\063\024\064\027\001\002\000\022\011\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\051\ufff1\054\ufff1\063\ufff1\064\ufff1\001" +
    "\002\000\016\040\037\041\036\042\040\043\033\044\035" +
    "\053\076\001\002\000\020\011\020\014\017\015\031\016" +
    "\023\051\021\063\024\064\027\001\002\000\022\011\020" +
    "\014\017\015\031\016\023\051\021\054\100\063\024\064" +
    "\027\001\002\000\022\011\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\051\ufff2\054\ufff2\063\ufff2\064\ufff2\001\002\000\016\040" +
    "\037\041\036\042\040\043\033\044\035\053\102\001\002" +
    "\000\020\011\020\014\017\015\031\016\023\051\021\063" +
    "\024\064\027\001\002\000\022\011\020\014\017\015\031" +
    "\016\023\051\021\054\104\063\024\064\027\001\002\000" +
    "\022\011\ufff0\014\ufff0\015\ufff0\016\ufff0\051\ufff0\054\ufff0" +
    "\063\ufff0\064\ufff0\001\002\000\004\053\106\001\002\000" +
    "\020\011\020\014\017\015\031\016\023\051\021\063\024" +
    "\064\027\001\002\000\022\011\020\014\017\015\031\016" +
    "\023\051\021\054\110\063\024\064\027\001\002\000\012" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\001\002\000\004\053" +
    "\112\001\002\000\020\011\020\014\017\015\031\016\023" +
    "\051\021\063\024\064\027\001\002\000\022\011\020\014" +
    "\017\015\031\016\023\051\021\054\114\063\024\064\027" +
    "\001\002\000\012\002\ufffb\004\ufffb\005\ufffb\006\ufffb\001" +
    "\002\000\012\002\ufffe\004\ufffe\005\ufffe\006\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\010\002\010\003\003\004\005\001\001\000" +
    "\004\004\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\021\006\024\007\025\010\027\001" +
    "\001\000\004\010\100\001\001\000\004\010\063\001\001" +
    "\000\004\010\061\001\001\000\010\006\046\007\047\010" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\031\001\001\000\002\001\001\000\004" +
    "\010\051\001\001\000\012\005\044\006\024\007\025\010" +
    "\027\001\001\000\004\010\043\001\001\000\004\010\042" +
    "\001\001\000\004\010\041\001\001\000\004\010\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\046\007\047\010\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\054\001\001\000\002\001\001\000\012\005\056" +
    "\006\024\007\025\010\027\001\001\000\010\006\046\007" +
    "\047\010\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\065\006\024\007\025\010\027\001\001\000\010" +
    "\006\046\007\047\010\050\001\001\000\002\001\001\000" +
    "\004\010\074\001\001\000\002\001\001\000\012\005\072" +
    "\006\024\007\025\010\027\001\001\000\010\006\046\007" +
    "\047\010\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\076\006\024\007\025\010\027\001\001\000" +
    "\010\006\046\007\047\010\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\102\006\024\007\025\010" +
    "\027\001\001\000\010\006\046\007\047\010\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\106\006" +
    "\024\007\025\010\027\001\001\000\010\006\046\007\047" +
    "\010\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\112\006\024\007\025\010\027\001\001\000\010" +
    "\006\046\007\047\010\050\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

    public void syntax_error(Symbol s) {
        this.s = s;
    }

    public Symbol getS() {
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= Parentesis_a EXPRESION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION Modulo EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION Division EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION Multiplicacion EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CICLO ::= For Identificador In EXPRESION Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CICLO ::= Until EXPRESION Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CICLO ::= While EXPRESION Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONDICIONAL ::= If EXPRESION Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONDICIONAL ::= If EXPRESION Llave_a SENTENCIA Llave_c Elsif EXPRESION Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONDICIONAL ::= If EXPRESION Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA CICLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= Module Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= Class Identificador Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= Def Identificador Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACIONES ::= DECLARACIONES DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

